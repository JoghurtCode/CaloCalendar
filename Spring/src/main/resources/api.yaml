openapi: 3.0.3
info:
  title: CalCalculator API
  description: API for CalCalculator
  version: 1.0.0

servers:
  - url: http://localhost:8080
    #http://localhost:8080/swagger-ui/index.html#/
    #link f√ºr swagger-ui

tags:
  - name: UserProfile
  - name: GroceryItem
  - name: Meal

paths:
  /userProfile:
    post:
      tags:
        - UserProfile
      operationId: addUserProfile
      requestBody:
        description: Add a user to database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileModel'
        required: true
      responses:
        '200':
          description: UserProfile created successfully
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - UserProfile
      operationId: getAllUserProfiles
      responses:
        '200':
          description: A list of user profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfileModel'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - UserProfile
      operationId: updateUserProfile
      requestBody:
        description:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileModel"
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileModel"
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /userProfile/{id}:
    get:
      operationId: getUserProfileById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileModel'
        '400':
          description: UserProfile not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: UserProfile not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /groceryItem:
    post:
      tags:
        - GroceryItem
      operationId: addGroceryItem
      requestBody:
        description: Add a groceryItem to database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroceryItemModel'
        required: true
      responses:
        '200':
          description: GroceryItem created successfully
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - GroceryItem
      operationId: getAllGroceryItems
      responses:
        '200':
          description: A list of grocery items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroceryItemModel'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - groceryItem
      operationId: updateGroceryItem
      requestBody:
        description:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroceryItemModel"
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroceryItemModel"
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /groceryItem/{id}:
    get:
      operationId: getGroceryItemById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroceryItemModel'
        '400':
          description: GroceryItem not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteGroceryItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Item deleted successfully
        '400':
          description: GroceryItem not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /meal:
    post:
      tags:
        - Meal
      operationId: addMeal
      requestBody:
        description: Add a meal to database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealModel'
        required: true
      responses:
        '200':
          description: Meal created successfully
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Meal
      operationId: getAllMeals
      responses:
        '200':
          description: A list of meals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MealModel'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Meal
      operationId: updateMeal
      requestBody:
        description:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MealModel"
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MealModel"
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /meal/{id}:
    get:
      operationId: getMealById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Meal found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealModel'
        '400':
          description: Meal not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteMeal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Meal deleted successfully
        '400':
          description: Meal not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    UserProfileModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        userName:
          type: string
          example: MaxMustermann
        gender:
          type: integer
          example: 1
        age:
          type: integer
          example: 25
        weight:
          type: integer
          example: 75000
        levelOfPhysicalActivity:
          type: integer
          example: 2
      required:
        - userName
        - gender
        - age
        - weight
        - levelOfPhysicalActivity
    GroceryItemModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Reis
        calories:
          type: integer
          example: 100
        weight:
          type: integer
          example: 250
    MealModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        mealName:
          type: string
          example: Pizza
    Error:
      type: object
      properties:
        errorMessages:
          type: array
          items:
            type: string
          example: [ "Error message 1", "Error message 2" ]
          description: Fehlermeldungen
        status:
          type: string
          description: Ausgeschriebener HTTP Status
          example: "Bad Request"
